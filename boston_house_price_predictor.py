# -*- coding: utf-8 -*-
"""Boston House Price Predictor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OcvgmqQ_h4qlFpcDV22mQQZrIIFsL3nj

**Boston House Price Predictor**
"""

import pandas as pd

housing = pd.read_csv("data.csv")

housing.head()

housing.shape

housing.info()

housing.describe()

housing["CHAS"].value_counts()

housing["TAX"].value_counts()

housing["TAX"].unique()

housing["RAD"].unique()

"""**For Plotting Histograms**"""

import matplotlib.pyplot as plt
housing.hist(bins = 30, figsize = (20,15))

"""**Train-Test Splitting**"""

from sklearn.model_selection import train_test_split
train_set, test_set  = train_test_split(housing, test_size=0.2, random_state=42)

print(f"Rows in train set: {len(train_set)}\nRows in test set: {len(test_set)}")

train_set

from sklearn.model_selection import StratifiedShuffleSplit
split = StratifiedShuffleSplit(n_splits=1, test_size=0.2, random_state=42)
for train_index, test_index in split.split(housing, housing['CHAS']):
    strat_train_set = housing.loc[train_index]
    strat_test_set = housing.loc[test_index]

strat_test_set['CHAS'].value_counts()

strat_train_set['CHAS'].value_counts()

# 95/7

# 376/28

housing = strat_train_set

housing

"""**Looking for Correlations**"""

corr_matrix = housing.corr()
corr_matrix['MEDV'].sort_values(ascending=False)

from pandas.plotting import scatter_matrix
attributes = ["MEDV", "RM", "ZN", "LSTAT"]
scatter_matrix(housing[attributes], figsize = (12,8), alpha=0.5)

housing.plot(kind="scatter", x="RM", y="MEDV", alpha=0.8)

housing.plot(kind="scatter", x="LSTAT", y="MEDV", alpha=0.8)

"""**Splitting the train_set into features and labels**"""

housing = strat_train_set.drop("MEDV", axis=1) #features
housing_labels = strat_train_set["MEDV"].copy() #labels

"""**To fill the missing attributes by its median** """

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(strategy="median")
imputer.fit(housing)

imputer.statistics_

X = imputer.transform(housing)

X

housing_tr = pd.DataFrame(X, columns=housing.columns)

"""**Creating a Pipeline**"""

from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
my_pipeline = Pipeline([
    ('imputer', SimpleImputer(strategy="median")),
    ('std_scaler', StandardScaler()),
])

housing_num_tr = my_pipeline.fit_transform(housing)

housing_num_tr.shape

"""**Selecting a desired model for Boston House Price Prediction**"""

from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor
# model = LinearRegression()
# model = DecisionTreeRegressor()
model = RandomForestRegressor()
model.fit(housing_num_tr, housing_labels)

some_data = housing.iloc[:5]

some_labels = housing_labels.iloc[:5]

prepared_data = my_pipeline.transform(some_data)

model.predict(prepared_data)

list(some_labels)

"""**Evaluating the model**"""

from sklearn.metrics import mean_squared_error
import numpy as np
housing_predictions = model.predict(housing_num_tr)
mse = mean_squared_error(housing_labels, housing_predictions)
rmse = np.sqrt(mse)

rmse

"""**Using better evaluation technique - Cross Validation**"""

from sklearn.model_selection import cross_val_score
scores = cross_val_score(model, housing_num_tr, housing_labels, scoring="neg_mean_squared_error", cv=10)
rmse_scores = np.sqrt(-scores)

rmse_scores

def print_scores(scores):
    print("Scores:", scores)
    print("Mean: ", scores.mean())
    print("Standard deviation: ", scores.std())

"""**Scores for LinearRegression Model**

Scores: [4.22235612 4.26438649 5.09424333 3.83081183 5.37600331 4.41092152
 7.47272243 5.48554135 4.14606627 6.0717752 ]

Mean:  5.037482786117751

Standard deviation:  1.0594382405606957



"""

# print_scores(rmse_scores)

"""**Scores for DecisionTreeRegressor Model**

Scores: [4.06610019 4.45667491 5.06612374 3.69112317 3.98465808 2.98709725
 5.22907736 3.97652486 3.28100594 4.69342625]

Mean:  4.143181175207883

Standard deviation:  0.6910223907551595

"""

print_scores(rmse_scores)

"""**Scores for RandomForestRegressor Model**

Scores: [2.90552098 2.89545237 4.50321313 2.6602514  3.50916678 2.68634661
 4.44480823 3.41369708 3.16591219 3.1829584 ]

Mean:  3.3367327164957556

Standard deviation:  0.6275581324805367

**Therefore we choose RandomForestRegressor Model for our Boston House Price Prediction since it has least root mean squared error(rmse)**

**Saving our model**
"""

from joblib import dump, load
dump(model, 'Boston.joblib')

"""**Next step: Testing the model on test data**"""

X_test = strat_test_set.drop("MEDV", axis=1)
Y_test = strat_test_set["MEDV"].copy()
X_test_prepared = my_pipeline.transform(X_test)
final_predictions = model.predict(X_test_prepared)
final_mse = mean_squared_error(Y_test, final_predictions)
final_rmse = np.sqrt(final_mse)

final_rmse

print(final_predictions, list(Y_test))

"""**Using the model**"""

from joblib import dump, load
import numpy as np
model = load('Boston.joblib') 
features = np.array([[-5.43942006, 4.12628155, -1.6165014, -0.67288841, -1.42262747,
       -11.44443979304, -49.31238772,  7.61111401, -26.0016879 , -0.5778192 ,
       -0.97491834,  0.41164221, -66.86091034]])
model.predict(features)